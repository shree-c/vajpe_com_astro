---
import Image from '~/components/common/Image.astro';
import Button from '~/components/ui/Button.astro';

import type { Hero as Props } from '~/types';

const {
  title = await Astro.slots.render('title'),
  subtitle = await Astro.slots.render('subtitle'),
  // tagline,
  description = await Astro.slots.render('description'),

  content = await Astro.slots.render('content'),
  actions = await Astro.slots.render('actions'),
  image = await Astro.slots.render('image'),

  id,
  bg = await Astro.slots.render('bg'),
} = Astro.props;
---

<section class="relative md:-mt-[76px] not-prose" {...id ? { id } : {}}>
  <div class="absolute inset-0 pointer-events-none" aria-hidden="true">
    <slot name="bg">
      {bg ? <Fragment set:html={bg} /> : null}
    </slot>
  </div>
  <div class="relative max-w-7xl mx-auto px-4 sm:px-6">
    <div class="pt-0 md:pt-[76px] pointer-events-none"></div>
    <div class="py-24 md:py-36 relative">
      <div class="text-center max-w-5xl mx-auto">
        {
          title && (
            <h1
              class="text-3xl lg:text-5xl  font-semibold leading-tighter tracking-tighter mb-3 font-heading dark:text-gray-200 intersect-once intersect-quarter motion-safe:md:opacity-0 motion-safe:md:intersect:animate-fade "
              set:html={title}
            />
          )
        }
        <div class="max-w-3xl mx-auto">
          {
            subtitle && (
              <p
                class="lg:text-xl text-muted mb-7 dark:text-slate-300 intersect-once intersect-quarter motion-safe:md:opacity-0 motion-safe:md:intersect:animate-fade"
                set:html={subtitle}
              />
            )
          }
          {
            description && (
              <div class="max-w-3xl mx-auto">
                <p
                  class="text-lg text-muted mb-6 dark:text-slate-300 intersect-once intersect-quarter motion-safe:md:opacity-0 motion-safe:md:intersect:animate-fade"
                  set:html={description}
                />
              </div>
            )
          }
          {
            actions && (
              <div class="max-w-xs sm:max-w-md m-auto flex flex-nowrap flex-col sm:flex-row sm:justify-center gap-4 intersect-once intersect-quarter motion-safe:md:opacity-0 motion-safe:md:intersect:animate-fade">
                {Array.isArray(actions) ? (
                  actions.map((action) => (
                    <div class="flex w-full sm:w-auto">
                      <Button {...(action || {})} class="w-full sm:mb-0" />
                    </div>
                  ))
                ) : (
                  <Fragment set:html={actions} />
                )}
              </div>
            )
          }
          <!-- TODO -->
          <div
            class="hidden intersect-once intercept-no-queue intersect-quarter motion-safe:md:opacity-0 motion-safe:md:intersect:animate-fade absolute w-full h-full top-0 left-0 -z-10"
          >
            {
              image && (
                <div class="relative m-auto opacity-40">
                  {typeof image === 'string' ? (
                    <Fragment set:html={image} />
                  ) : (
                    <Image
                      class="mx-auto rounded-md w-full"
                      widths={[400, 768, 1024, 2040]}
                      sizes="(max-width: 767px) 400px, (max-width: 1023px) 768px, (max-width: 2039px) 1024px, 2040px"
                      loading="eager"
                      width={1200}
                      height={576}
                      {...image}
                    />
                  )}
                </div>
              )
            }
          </div>
        </div>

        {content && <Fragment set:html={content} />}
      </div>
    </div>
  </div>
</section>
